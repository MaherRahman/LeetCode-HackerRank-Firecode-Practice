/*  Student information for assignment:
 *
 *  On my honor, Maher Rahman, this programming assignment is my own work
 *  and I have not provided this code to any other student.
 *
 *  UTEID: mmr3447
 *  email address: MaherRahman1@gmail.com
 *  Grader name: Andrew
 *  Number of slip days I am using: 0
 */

import java.util.ArrayList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;

/**
 * Shell for a binary search tree class.
 * @author scottm
 * @param <E> The data type of the elements of this BinartSearchTree.
 * Must implement Comparable or inherit from a class that implements
 * Comparable.
 *
 */
public class BinarySearchTree<E extends Comparable<? super E>> {

    private BSTNode<E> root;
    private int size;
    // CS314 students. Add any other instance variables you want here

    // CS314 students. Add a default constructor here.
    
    /**
     * Default Constructor, creates an empty BinarySearchTree. 
     */
    public BinarySearchTree() {
    	
    }

    /**
     *  Add the specified item to this Binary Search Tree if it is not already present.
     *  <br>
     *  pre: <tt>value</tt> != null<br>
     *  post: Add value to this tree if not already present. Return true if this tree
     *  changed as a result of this method call, false otherwise.
     *  @param value the value to add to the tree
     *  @return false if an item equivalent to value is already present
     *  in the tree, return true if value is added to the tree and size() = old size() + 1
     */
    public boolean add(E value) {
    	// if the root is null, this is an empty BST
    	if (this.root == null) {
    		this.root = new BSTNode<>(value);
    		size++;
    		return true;
    	} else {
	    	// call a helper method, and send in our current Root and the value
	    	return addHelper(this.root, value);
    	}
    }
    
    public boolean addHelper(BSTNode<E> root, E value) {
    	// we've found a spot in our BST that this value belongs to
    	if (root == null) {
    		root = new BSTNode<>(value);
    		size++;
            return true;
    	} else {
    		// otherwise, move in the direction to add the value to our BST
        	// compare the roots data to the value, and move left or right accordingly. 
    		if (root.data.compareTo(value) == 0) {
    			// value is in the tree, do nothing. 
    			return false;
    		} else if (root.data.compareTo(value) < 0) {
    			return addHelper(root.left, value);
    		} else {
    			return addHelper(root.right, value);
    		}
    	}
    }

    /**
     *  Remove a specified item from this Binary Search Tree if it is present.
     *  <br>
     *  pre: <tt>value</tt> != null<br>
     *  post: Remove value from the tree if present, return true if this tree
     *  changed as a result of this method call, false otherwise.
     *  @param value the value to remove from the tree if present
     *  @return false if value was not present
     *  returns true if value was present and size() = old size() - 1
     */
    public boolean remove(E value) {
        return true;
    }


    /**
     *  Check to see if the specified element is in this Binary Search Tree.
     *  <br>
     *  pre: <tt>value</tt> != null<br>
     *  post: return true if value is present in tree, false otherwise
     *  @param value the value to look for in the tree
     *  @return true if value is present in this tree, false otherwise
     */
    public boolean isPresent(E value) {
        return isPresentHelper(this.root, value);
    }
    
    public boolean isPresentHelper(BSTNode<E> root, E value) {
    	// base case, the node is null, meaning the data is not in the tree 
    	if (root == null) {
    		return false;
    	} else {
    		if (root.data.compareTo(value) == 0) {
    			// this is the value we were looking for!
    			return true;
    		} else if (root.data.compareTo(value) < 0) {
    			// check the left subtree
    			return isPresentHelper(root.left, value);
    		} else {
    			// check the right subtree
    			return isPresentHelper(root.right, value);
    		}
    	}
    }


    /**
     *  Return how many elements are in this Binary Search Tree.
     *  <br>
     *  pre: none<br>
     *  post: return the number of items in this tree
     *  @return the number of items in this Binary Search Tree
     */
    public int size() {
        return size;
    }

    /**
     *  return the height of this Binary Search Tree.
     *  <br>
     *  pre: none<br>
     *  post: return the height of this tree.
     *  If the tree is empty return -1, otherwise return the
     *  height of the tree
     *  @return the height of this tree or -1 if the tree is empty
     */
    public int height() {
    	if (root == null) {
    		// empty tree, height is -1
    		return -1;
    	} else if (root.left == null && root.right == null){
    		// this is a tree with only one element
    		return 0;
    	} else {
    		// tree has atleast one left or right subtree
    		return heightHelper(root);
    	}
    }
    
    private int heightHelper(BSTNode<E> root) {
    	int result = 0;
    	if (root == null) {
    		// this is a dead end, no more depth to this tree
    		return result;
    	} else {
    		result++;
    		// check the left and right subtree, and return the one with the greater height
    		return result + Math.max(heightHelper(root.left), heightHelper(root.right));
    	}
    }

    /**
     *  Return a list of all the elements in this Binary Search Tree.
     *  <br>
     *  pre: none<br>
     *  post: return a List object with all data from the tree in ascending order. 
     *  If the tree is empty return an empty List
     *  @return a List object with all data from the tree in sorted order
     *  if the tree is empty return an empty List
     */
    public List<E> getAll() {
    	ArrayList<E> ascendingBST = new ArrayList<>();
    	getAllHelper(root, ascendingBST);
        return ascendingBST;
    }
    
    private void getAllHelper(BSTNode<E> root, ArrayList<E> ascendingBST) {
    	if (root.left != null) {
    		getAllHelper(root.left, ascendingBST);
    	} 
    	ascendingBST.add(root.data);
    	if (root.right != null) {
    		getAllHelper(root.right, ascendingBST);
    	}
    }



    /**
     * return the maximum value in this binary search tree.
     * <br>
     * pre: <tt>size()</tt> > 0<br>
     * post: return the largest value in this Binary Search Tree
     * @return the maximum value in this tree
     */
    public E max() {
    	if (size <= 0) {
    		throw new IllegalArgumentException("Violation of Precondtions");
    	}
    	BSTNode<E> temp = root;
    	// go to the right most subtree to get the max value
    	while (temp.right != null) {
    		temp = temp.right;
    	}
        return temp.data;
    }

    /**
     * return the minimum value in this binary search tree.
     * <br>
     * pre: <tt>size()</tt> > 0<br>
     * post: return the smallest value in this Binary Search Tree
     * @return the minimum value in this tree
     */
    public E min() {
    	if (size <= 0) {
    		throw new IllegalArgumentException("Violation of Precondtions");
    	}
    	BSTNode<E> temp = root;
    	// go to the left most subtree to get the max value
    	while (temp.left != null) {
    		temp = temp.left;
    	}
        return temp.data;
    }

    /**
     * An add method that implements the add algorithm iteratively instead of recursively.
     * <br>pre: data != null
     * <br>post: if data is not present add it to the tree, otherwise do nothing.
     * @param data the item to be added to this tree
     * @return true if data was not present before this call to add, false otherwise.
     */
    public boolean iterativeAdd(E data) {
    	// base case, empty tree
    	if (this.root == null) {
    		root = new BSTNode<>(data);
    	}
    	return iterativeAddHelper(data);
    }
    
    private boolean iterativeAddHelper(E data) {
    	Stack<BSTNode<E>> stack = new Stack<>();
    	stack.push(root);
    	while (!stack.isEmpty()) {
    		BSTNode<E> temp = stack.pop();
    		if (temp.data.compareTo(data) < 0) {
    			if (temp.left == null) {
    				// we found an empty spot
    				temp.left = new BSTNode<>(data);
    				return true;
    			}
    			stack.push(temp.left);
    		} else if (temp.data.compareTo(data) > 0) {
    			if (temp.right == null) {
    				// we found an empty spot
    				temp.right = new BSTNode<>(data);
    				return true;
    			}
    			stack.push(temp.right);
    		}
    	}
    	// if we're out of the while loop, the item was in our list already
    	return false;
    }


    /**
     * Return the "kth" element in this Binary Search Tree. If kth = 0 the 
     * smallest value (minimum) is returned. If kth = 1 the second smallest value is
     * returned, and so forth.
     * <br>pre: 0 <= kth < size()
     * @param kth indicates the rank of the element to get
     * @return the kth value in this Binary Search Tree
     */
    public E get(int kth) {
        return getHelper(root, kth);
    }
    
    private E getHelper(BSTNode<E> root, int index) {
    	ArrayList<E> ascendingBST = new ArrayList<>();
    	if (root.left != null) {
    		getHelper(root.left, index);
    	} 
    	ascendingBST.add(root.data);
    	if (ascendingBST.size() - 1 == index) {
    		return ascendingBST.get(index);
    	}
    	if (root.right != null) {
    		getHelper(root.right, index);
    	}
    	return ascendingBST.get(index);
    }


    /**
     * Return a List with all values in this Binary Search Tree that are less than
     * the parameter <tt>value</tt>.
     * <tt>value</tt> != null<br>
     * @param value the cutoff value
     * @return a List with all values in this tree that are less than the parameter value. If there are
     * no values in this tree less than value return an empty list. The elements of the list are in ascending order.
     */
    public List<E> getAllLessThan(E value) {
    	BSTNode<E> temp = root;
        //search for the subtree less than the given value, then get all values in that subtree
    	while (temp != null && temp.data.compareTo(value) < 0) {
    		temp = temp.left;
    	}
    	ArrayList<E> getAllLessThanVal = new ArrayList<>();
    	getAllHelper(temp, getAllLessThanVal);
        return getAllLessThanVal;
    }


    /**
     * Return a List with all values in this Binary Search Tree that are greater than
     * the parameter <tt>value</tt>.
     * <tt>value</tt> != null<br>
     * @param value the cutoff value
     * @return a List with all values in this tree that are greater than the parameter value. If there are
     * no values in this tree greater than value return an empty list. The elements of the list are in ascending order.
     */
    public List<E> getAllGreaterThan(E value) {
    	BSTNode<E> temp = root;
        //search for the subtree greater than the given value, then get all values in that subtree
    	while (temp != null && temp.data.compareTo(value) > 0) {
    		temp = temp.right;
    	}
    	ArrayList<E> getAllGreaterThanVal = new ArrayList<>();
    	getAllHelper(temp, getAllGreaterThanVal);
        return getAllGreaterThanVal;
    }



    /**
     * Find the number of nodes in this tree at the specified depth.
     * <br>pre: none
     * @param d The target depth.
     * @return The number of nodes in this tree at a depth equal to
     * the parameter d.
     */
    public int numNodesAtDepth(int d) {
        return -1;
    }

    /**
     * Prints a vertical representation of this tree.
     * The tree has been rotated counter clockwise 90
     * degrees. The root is on the left. Each node is printed
     * out on its own row. A node's children will not necessarily
     * be at the rows directly above and below a row. They will
     * be indented three spaces from the parent. Nodes indented the
     * same amount are at the same depth.
     * <br>pre: none
     */
    public void printTree() {
        printTree(root, "");
    }

    private void printTree(BSTNode<E> n, String spaces) {
        if(n != null){
            printTree(n.getRight(), spaces + "  ");
            System.out.println(spaces + n.getData());
            printTree(n.getLeft(), spaces + "  ");
        }
    }

    private static class BSTNode<E extends Comparable<? super E>> {
        private E data;
        private BSTNode<E> left;
        private BSTNode<E> right;

        public BSTNode() {
            this(null);
        }

        public BSTNode(E initValue) {
            this(null, initValue, null); 
        }

        public BSTNode(BSTNode<E> initLeft,
                E initValue,        
                BSTNode<E> initRight) {
            data = initValue; 
            left = initLeft; 
            right = initRight; 
        }

        public E getData() { 
            return data; 
        }

        public BSTNode<E> getLeft() { 
            return left;
        }

        public BSTNode<E> getRight() { 
            return right; 
        }

        public void setData(E theNewValue) { 
            data = theNewValue; 
        }

        public void setLeft(BSTNode<E> theNewLeft) { 
            left = theNewLeft; 
        }

        public void setRight(BSTNode<E> theNewRight) { 
            right = theNewRight; 
        }    
    }
}
