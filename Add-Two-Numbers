/**
 *You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

  You may assume the two numbers do not contain any leading zero, except the number 0 itself.
  
  Example:

  Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
  Output: 7 -> 0 -> 8
  Explanation: 342 + 465 = 807.
 *
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode current = null;
        ListNode head = null;
        int sum = 0;
        int excess = 0;
        
        while(l1 != null || l2 != null) {
            sum = excess;
            if (l1 != null) {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null) {
                sum += l2.val;
                l2 = l2.next;
            }
            ListNode x = new ListNode(sum % 10);
            
            if (current == null) {
                current = x; 
                head = x;
            } else {
                current.next = x;
                current = current.next;
            }
            
            excess = sum / 10;
        }
        
        if (excess == 1) {
            current.next = new ListNode(1);
        }
        
        if (head != null) {
            return head;
        } else {
            return new ListNode(0);
        }
    }
}
